os  #!/usr/bin/env python3
"""
üîÑ ORQUESTRADOR GROUNDED THEORY - WORKFLOW L√ìGICO
================================================

Orquestrador principal que implementa rigorosamente o workflow
l√≥gico da Grounded Theory com etapas bem definidas e sequenciais.

üéØ WORKFLOW L√ìGICO:
1. DEFINI√á√ÉO DO PROBLEMA
2. COLETA INICIAL (Te√≥rica)
3. CODIFICA√á√ÉO ABERTA
4. AMOSTRAGEM TE√ìRICA (Iterativa)
5. CODIFICA√á√ÉO AXIAL
6. VERIFICA√á√ÉO DE SATURA√á√ÉO
7. CODIFICA√á√ÉO SELETIVA
8. DESENVOLVIMENTO DE TEORIA
9. VALIDA√á√ÉO E REFINAMENTO

üìã PRINC√çPIOS:
- Sequ√™ncia l√≥gica rigorosa
- Cada etapa depende da anterior
- Crit√©rios claros de progress√£o
- Documenta√ß√£o completa do processo
- Rastreabilidade metodol√≥gica
"""

import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional

from grounded_theory_metodologica import GroundedTheoryMetodologica


class OrquestradorGroundedTheory:
    """
    üîÑ Orquestrador do workflow l√≥gico da Grounded Theory
    """

    def __init__(self):
        """
        Inicializa o orquestrador.
        """
        self.logger = self._configurar_logger()
        self.workflow_status = {
            "etapa_atual": 0,
            "etapas_concluidas": [],
            "etapas_pendentes": [],
            "status_geral": "inicializado",
        }
        self.resultados_workflow = {}

    def _configurar_logger(self) -> logging.Logger:
        """
        üìù Configura o logger.
        """
        os.makedirs("logs", exist_ok=True)

        logger = logging.getLogger("OrquestradorGT")
        logger.setLevel(logging.INFO)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        fh = logging.FileHandler(
            f"logs/orquestrador_gt_{timestamp}.log", encoding="utf-8"
        )
        fh.setLevel(logging.INFO)

        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)

        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)

        logger.addHandler(fh)
        logger.addHandler(ch)

        return logger

    def definir_problema_pesquisa(self) -> Dict:
        """
        üéØ ETAPA 1: Define o problema de pesquisa.

        Returns:
            Defini√ß√£o do problema
        """
        self.logger.info("üéØ ETAPA 1: DEFININDO PROBLEMA DE PESQUISA")

        problema = {
            "pergunta_central": "Como a UNA-SUS aborda elementos de DEIA em seus cursos?",
            "objetivo": "Desenvolver teoria fundamentada sobre abordagem DEIA na forma√ß√£o em sa√∫de",
            "contexto": "Educa√ß√£o em sa√∫de p√∫blica no Brasil",
            "populacao": "Cursos oferecidos pela UNA-SUS",
            "criterios_inclusao": [
                "Cursos ativos na plataforma UNA-SUS",
                "Dados dispon√≠veis via API p√∫blica",
                "Informa√ß√µes sobre conte√∫do e objetivos",
            ],
            "criterios_exclusao": [
                "Cursos sem informa√ß√µes b√°sicas",
                "Dados duplicados ou inconsistentes",
            ],
            "questoes_especificas": [
                "Quais elementos DEIA est√£o presentes nos cursos?",
                "Como esses elementos s√£o abordados?",
                "Quais padr√µes emergem da an√°lise?",
                "Como isso se relaciona com pol√≠ticas p√∫blicas?",
            ],
        }

        self.workflow_status["etapas_concluidas"].append("definicao_problema")
        self.workflow_status["etapa_atual"] = 1

        self.logger.info("‚úÖ Problema de pesquisa definido")
        return problema

    def configurar_metodologia(self) -> Dict:
        """
        ‚öôÔ∏è ETAPA 2: Configura a metodologia.

        Returns:
            Configura√ß√£o metodol√≥gica
        """
        self.logger.info("‚öôÔ∏è ETAPA 2: CONFIGURANDO METODOLOGIA")

        configuracao = {
            "metodologia": "Grounded Theory (Teoria Fundamentada)",
            "abordagem": "Qualitativa",
            "paradigma": "Construtivista",
            "etapas_metodologicas": [
                "Coleta Inicial (Te√≥rica)",
                "Codifica√ß√£o Aberta",
                "Amostragem Te√≥rica",
                "Codifica√ß√£o Axial",
                "Verifica√ß√£o de Satura√ß√£o",
                "Codifica√ß√£o Seletiva",
                "Desenvolvimento de Teoria",
            ],
            "criterios_rigor": [
                "Credibilidade",
                "Transferibilidade",
                "Dependabilidade",
                "Confirmabilidade",
            ],
            "instrumentos_coleta": [
                "API UNA-SUS",
                "An√°lise documental",
                "Codifica√ß√£o sistem√°tica",
            ],
            "criterios_saturacao": {
                "novos_conceitos": "< 10%",
                "iteracoes_maximas": 5,
                "estabilidade_categorias": True,
            },
        }

        self.workflow_status["etapas_concluidas"].append("configuracao_metodologia")
        self.workflow_status["etapa_atual"] = 2

        self.logger.info("‚úÖ Metodologia configurada")
        return configuracao

    def executar_grounded_theory(self) -> Dict:
        """
        üß† ETAPA 3: Executa o processo de Grounded Theory.

        Returns:
            Resultados da Grounded Theory
        """
        self.logger.info("üß† ETAPA 3: EXECUTANDO GROUNDED THEORY")

        # Configurar Grounded Theory
        config = {
            "criterios_iniciais": {
                "descritores": [],  # Sem crit√©rios restritivos para coleta inicial
                "filtros": {},
                "max_iteracoes": 5,
            },
            "configuracoes_analise": {
                "min_frequencia_conceito": 2,
                "min_categorias": 3,
                "criterio_saturacao": 0.1,
                "max_iteracoes_saturacao": 5,
            },
        }

        # Executar processo
        gt = GroundedTheoryMetodologica(config)
        resultados = gt.executar_processo_completo()

        if resultados.get("status") == "concluido":
            self.workflow_status["etapas_concluidas"].append("grounded_theory")
            self.workflow_status["etapa_atual"] = 3
            self.logger.info("‚úÖ Grounded Theory conclu√≠da")
        else:
            self.logger.error(f"‚ùå Erro na Grounded Theory: {resultados.get('erro')}")

        return resultados

    def validar_resultados(self, resultados_gt: Dict) -> Dict:
        """
        ‚úÖ ETAPA 4: Valida os resultados obtidos.

        Args:
            resultados_gt: Resultados da Grounded Theory

        Returns:
            Valida√ß√£o dos resultados
        """
        self.logger.info("‚úÖ ETAPA 4: VALIDANDO RESULTADOS")

        validacao = {
            "criterios_rigor": {},
            "limites_identificados": [],
            "recomendacoes": [],
            "status_validacao": "em_analise",
        }

        # Validar credibilidade
        if resultados_gt.get("status") == "concluido":
            validacao["criterios_rigor"]["credibilidade"] = {
                "status": "adequado",
                "justificativa": "Processo sistem√°tico e documentado",
            }
        else:
            validacao["criterios_rigor"]["credibilidade"] = {
                "status": "inadequado",
                "justificativa": "Processo n√£o conclu√≠do adequadamente",
            }

        # Validar transferibilidade
        dados_analisados = (
            resultados_gt.get("resultados_parciais", {})
            .get("coleta_inicial", {})
            .get("dados_coletados", 0)
        )
        if dados_analisados > 0:
            validacao["criterios_rigor"]["transferibilidade"] = {
                "status": "adequado",
                "justificativa": f"Contexto bem descrito com {dados_analisados} registros",
            }
        else:
            validacao["criterios_rigor"]["transferibilidade"] = {
                "status": "inadequado",
                "justificativa": "Dados insuficientes para transferibilidade",
            }

        # Validar dependabilidade
        etapas_executadas = resultados_gt.get("etapas_executadas", [])
        if len(etapas_executadas) >= 3:
            validacao["criterios_rigor"]["dependabilidade"] = {
                "status": "adequado",
                "justificativa": f"Processo consistente com {len(etapas_executadas)} etapas",
            }
        else:
            validacao["criterios_rigor"]["dependabilidade"] = {
                "status": "inadequado",
                "justificativa": "Processo incompleto",
            }

        # Validar confirmabilidade
        teoria_final = resultados_gt.get("teoria_final", {})
        if teoria_final.get("fenomeno_central"):
            validacao["criterios_rigor"]["confirmabilidade"] = {
                "status": "adequado",
                "justificativa": "Resultados baseados nos dados coletados",
            }
        else:
            validacao["criterios_rigor"]["confirmabilidade"] = {
                "status": "inadequado",
                "justificativa": "Teoria n√£o desenvolvida adequadamente",
            }

        # Identificar limites
        validacao["limites_identificados"] = [
            "An√°lise baseada em dados dispon√≠veis via API",
            "Amostragem te√≥rica limitada pelo contexto",
            "Necessidade de valida√ß√£o em outros contextos",
        ]

        # Gerar recomenda√ß√µes
        validacao["recomendacoes"] = [
            "Expandir an√°lise para outros contextos educacionais",
            "Validar teoria em diferentes popula√ß√µes",
            "Implementar indicadores de monitoramento",
            "Desenvolver estrat√©gias baseadas nos padr√µes identificados",
        ]

        # Definir status final
        criterios_adequados = sum(
            1
            for c in validacao["criterios_rigor"].values()
            if c["status"] == "adequado"
        )
        if criterios_adequados >= 3:
            validacao["status_validacao"] = "validado"
        else:
            validacao["status_validacao"] = "precisa_refinamento"

        self.workflow_status["etapas_concluidas"].append("validacao_resultados")
        self.workflow_status["etapa_atual"] = 4

        self.logger.info(f"‚úÖ Valida√ß√£o conclu√≠da: {validacao['status_validacao']}")
        return validacao

    def gerar_relatorio_final(
        self, problema: Dict, metodologia: Dict, resultados_gt: Dict, validacao: Dict
    ) -> Dict:
        """
        üìã ETAPA 5: Gera relat√≥rio final do workflow.

        Args:
            problema: Defini√ß√£o do problema
            metodologia: Configura√ß√£o metodol√≥gica
            resultados_gt: Resultados da Grounded Theory
            validacao: Valida√ß√£o dos resultados

        Returns:
            Relat√≥rio final
        """
        self.logger.info("üìã ETAPA 5: GERANDO RELAT√ìRIO FINAL")

        relatorio_final = {
            "workflow": "Grounded Theory - Workflow L√≥gico",
            "timestamp_inicio": datetime.now().isoformat(),
            "problema_pesquisa": problema,
            "metodologia": metodologia,
            "resultados_grounded_theory": resultados_gt,
            "validacao": validacao,
            "status_workflow": "concluido",
            "timestamp_fim": datetime.now().isoformat(),
        }

        # Salvar relat√≥rio
        self.salvar_relatorio_final(relatorio_final)

        self.workflow_status["etapas_concluidas"].append("relatorio_final")
        self.workflow_status["etapa_atual"] = 5
        self.workflow_status["status_geral"] = "concluido"

        self.logger.info("‚úÖ Relat√≥rio final gerado")
        return relatorio_final

    def salvar_relatorio_final(self, relatorio: Dict):
        """
        üíæ Salva o relat√≥rio final.

        Args:
            relatorio: Relat√≥rio a ser salvo
        """
        os.makedirs("relatorios", exist_ok=True)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

        # Salvar JSON
        caminho_json = f"relatorios/workflow_grounded_theory_{timestamp}.json"
        with open(caminho_json, "w", encoding="utf-8") as f:
            json.dump(relatorio, f, ensure_ascii=False, indent=2, default=str)

        # Gerar relat√≥rio Markdown
        relatorio_md = self.gerar_relatorio_markdown(relatorio)
        caminho_md = f"relatorio_workflow_grounded_theory_{timestamp}.md"

        with open(caminho_md, "w", encoding="utf-8") as f:
            f.write(relatorio_md)

        self.logger.info(f"üíæ Relat√≥rio final salvo:")
        self.logger.info(f"   üìÑ JSON: {caminho_json}")
        self.logger.info(f"   üìã Markdown: {caminho_md}")

    def gerar_relatorio_markdown(self, relatorio: Dict) -> str:
        """
        üìã Gera relat√≥rio em Markdown.

        Args:
            relatorio: Relat√≥rio a ser convertido

        Returns:
            Relat√≥rio em Markdown
        """
        md = f"""# üîÑ RELAT√ìRIO FINAL - WORKFLOW GROUNDED THEORY

## üìã RESUMO EXECUTIVO
- **Workflow**: Grounded Theory - Processo L√≥gico
- **Status**: {relatorio.get('status_workflow', 'N/A')}
- **Data In√≠cio**: {relatorio.get('timestamp_inicio', 'N/A')}
- **Data Fim**: {relatorio.get('timestamp_fim', 'N/A')}

## üéØ PROBLEMA DE PESQUISA

### Pergunta Central
{relatorio.get('problema_pesquisa', {}).get('pergunta_central', 'N/A')}

### Objetivo
{relatorio.get('problema_pesquisa', {}).get('objetivo', 'N/A')}

### Contexto
{relatorio.get('problema_pesquisa', {}).get('contexto', 'N/A')}

### Quest√µes Espec√≠ficas
"""

        questoes = relatorio.get("problema_pesquisa", {}).get(
            "questoes_especificas", []
        )
        for i, questao in enumerate(questoes, 1):
            md += f"{i}. {questao}\n"

        md += f"""
## ‚öôÔ∏è METODOLOGIA

### Abordagem
- **Metodologia**: {relatorio.get('metodologia', {}).get('metodologia', 'N/A')}
- **Abordagem**: {relatorio.get('metodologia', {}).get('abordagem', 'N/A')}
- **Paradigma**: {relatorio.get('metodologia', {}).get('paradigma', 'N/A')}

### Etapas Metodol√≥gicas
"""

        etapas = relatorio.get("metodologia", {}).get("etapas_metodologicas", [])
        for i, etapa in enumerate(etapas, 1):
            md += f"{i}. {etapa}\n"

        md += f"""
### Crit√©rios de Rigor
"""

        criterios = relatorio.get("metodologia", {}).get("criterios_rigor", [])
        for criterio in criterios:
            md += f"- {criterio}\n"

        md += f"""
## üß† RESULTADOS DA GROUNDED THEORY

### Status do Processo
- **Status**: {relatorio.get('resultados_grounded_theory', {}).get('status', 'N/A')}
- **Itera√ß√µes Realizadas**: {relatorio.get('resultados_grounded_theory', {}).get('iteracoes_realizadas', 0)}
- **Satura√ß√£o Atingida**: {relatorio.get('resultados_grounded_theory', {}).get('saturacao_atingida', False)}

### Etapas Executadas
"""

        etapas_executadas = relatorio.get("resultados_grounded_theory", {}).get(
            "etapas_executadas", []
        )
        for etapa in etapas_executadas:
            md += f"- {etapa}\n"

        md += f"""
### Teoria Desenvolvida
"""

        teoria = relatorio.get("resultados_grounded_theory", {}).get("teoria_final", {})
        md += f"""
#### Fen√¥meno Central
{teoria.get('fenomeno_central', 'N√£o identificado')}

#### Categorias Principais
"""

        categorias = teoria.get("categorias_principais", [])
        for i, categoria in enumerate(categorias, 1):
            md += f"{i}. **{categoria}**\n"

        md += f"""
#### Proposi√ß√µes Te√≥ricas
"""

        proposicoes = teoria.get("proposicoes_teoricas", [])
        for i, prop in enumerate(proposicoes, 1):
            md += f"{i}. {prop}\n"

        md += f"""
## ‚úÖ VALIDA√á√ÉO DOS RESULTADOS

### Status da Valida√ß√£o
- **Status**: {relatorio.get('validacao', {}).get('status_validacao', 'N/A')}

### Crit√©rios de Rigor
"""

        criterios_rigor = relatorio.get("validacao", {}).get("criterios_rigor", {})
        for criterio, info in criterios_rigor.items():
            md += f"""
#### {criterio.title()}
- **Status**: {info.get('status', 'N/A')}
- **Justificativa**: {info.get('justificativa', 'N/A')}
"""

        md += f"""
### Limites Identificados
"""

        limites = relatorio.get("validacao", {}).get("limites_identificados", [])
        for limite in limites:
            md += f"- {limite}\n"

        md += f"""
### Recomenda√ß√µes
"""

        recomendacoes = relatorio.get("validacao", {}).get("recomendacoes", [])
        for i, rec in enumerate(recomendacoes, 1):
            md += f"{i}. {rec}\n"

        md += f"""
## üéØ CONCLUS√ïES E IMPLICA√á√ïES

### Principais Descobertas
1. **Teoria Fundamentada**: Desenvolvida baseada nos dados coletados
2. **Padr√µes Identificados**: {len(categorias)} categorias principais
3. **Fen√¥meno Central**: {teoria.get('fenomeno_central', 'N√£o identificado')}
4. **Proposi√ß√µes**: {len(proposicoes)} proposi√ß√µes te√≥ricas desenvolvidas

### Implica√ß√µes para Pesquisa
- Base s√≥lida para pesquisas futuras
- Metodologia replic√°vel em outros contextos
- Insights para desenvolvimento de teorias

### Implica√ß√µes para Pol√≠ticas P√∫blicas
- Evid√™ncias para tomada de decis√µes
- Base para indicadores de monitoramento
- Direcionamento para pol√≠ticas educacionais

### Implica√ß√µes para Pr√°tica
- Aplica√ß√£o dos insights em desenvolvimento de cursos
- Considera√ß√£o dos elementos identificados no planejamento
- Melhoria na abordagem de DEIA

---
*Relat√≥rio gerado automaticamente pelo Orquestrador Grounded Theory UNA-SUS*
"""

        return md

    def executar_workflow_completo(self) -> Dict:
        """
        üöÄ Executa o workflow completo da Grounded Theory.

        Returns:
            Resultados completos do workflow
        """
        self.logger.info("üöÄ INICIANDO WORKFLOW COMPLETO DA GROUNDED THEORY")

        try:
            # ETAPA 1: Definir problema de pesquisa
            self.logger.info("üéØ ETAPA 1: Definindo problema de pesquisa")
            problema = self.definir_problema_pesquisa()

            # ETAPA 2: Configurar metodologia
            self.logger.info("‚öôÔ∏è ETAPA 2: Configurando metodologia")
            metodologia = self.configurar_metodologia()

            # ETAPA 3: Executar Grounded Theory
            self.logger.info("üß† ETAPA 3: Executando Grounded Theory")
            resultados_gt = self.executar_grounded_theory()

            # ETAPA 4: Validar resultados
            self.logger.info("‚úÖ ETAPA 4: Validando resultados")
            validacao = self.validar_resultados(resultados_gt)

            # ETAPA 5: Gerar relat√≥rio final
            self.logger.info("üìã ETAPA 5: Gerando relat√≥rio final")
            relatorio_final = self.gerar_relatorio_final(
                problema, metodologia, resultados_gt, validacao
            )

            self.logger.info("‚úÖ WORKFLOW COMPLETO FINALIZADO COM SUCESSO")
            return relatorio_final

        except Exception as e:
            self.logger.error(f"‚ùå Erro no workflow: {str(e)}")
            return {
                "status_workflow": "erro",
                "erro": str(e),
                "etapas_concluidas": self.workflow_status["etapas_concluidas"],
            }

    def mostrar_status_workflow(self):
        """
        üìä Mostra status atual do workflow.
        """
        print("\n" + "=" * 60)
        print("üìä STATUS DO WORKFLOW GROUNDED THEORY")
        print("=" * 60)

        print(f"üîÑ Status Geral: {self.workflow_status['status_geral']}")
        print(f"üìã Etapa Atual: {self.workflow_status['etapa_atual']}")

        print(f"\n‚úÖ Etapas Conclu√≠das:")
        for etapa in self.workflow_status["etapas_concluidas"]:
            print(f"   - {etapa}")

        print(f"\n‚è≥ Etapas Pendentes:")
        etapas_totais = [
            "definicao_problema",
            "configuracao_metodologia",
            "grounded_theory",
            "validacao_resultados",
            "relatorio_final",
        ]

        for etapa in etapas_totais:
            if etapa not in self.workflow_status["etapas_concluidas"]:
                print(f"   - {etapa}")

        print("=" * 60)


def main():
    """
    üöÄ Fun√ß√£o principal.
    """
    print("üîÑ ORQUESTRADOR GROUNDED THEORY - WORKFLOW L√ìGICO")
    print("=" * 60)
    print("üéØ Processo rigoroso e sequencial")
    print("=" * 60)

    orquestrador = OrquestradorGroundedTheory()

    # Executar workflow completo
    resultados = orquestrador.executar_workflow_completo()

    if resultados.get("status_workflow") == "concluido":
        print("\n‚úÖ WORKFLOW CONCLU√çDO COM SUCESSO!")
        print(f"üìã Relat√≥rio final gerado")
        print(
            f"üß† Teoria desenvolvida: {resultados.get('resultados_grounded_theory', {}).get('teoria_final', {}).get('fenomeno_central', 'N/A')}"
        )
        print(
            f"‚úÖ Valida√ß√£o: {resultados.get('validacao', {}).get('status_validacao', 'N/A')}"
        )
    else:
        print(f"\n‚ùå ERRO NO WORKFLOW: {resultados.get('erro', 'Desconhecido')}")
        orquestrador.mostrar_status_workflow()


if __name__ == "__main__":
    main()
