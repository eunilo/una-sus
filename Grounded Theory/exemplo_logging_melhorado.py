#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìù EXEMPLO DE USO DO SISTEMA DE LOGGING MELHORADO
================================================

Este script demonstra as funcionalidades do novo sistema de logging
implementado para o projeto Grounded Theory.
"""

import time

from modulos.logger_config import LoggerConfig, ProgressLogger, SectionLogger


def exemplo_logging_basico():
    """Demonstra o uso b√°sico dos loggers."""
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 1: LOGGING B√ÅSICO")
    print("=" * 60)

    # Logger para workflow
    workflow_logger = LoggerConfig.get_workflow_logger()
    workflow_logger.info("üîÑ Iniciando exemplo de workflow")
    workflow_logger.warning("‚ö†Ô∏è Aviso sobre configura√ß√£o")
    workflow_logger.error("‚ùå Erro simulado para teste")

    # Logger para coleta de dados
    collection_logger = LoggerConfig.get_collection_logger()
    collection_logger.info("üì• Iniciando coleta de dados")
    collection_logger.info("üìä 150 registros coletados")

    # Logger para an√°lise
    analysis_logger = LoggerConfig.get_analysis_logger()
    analysis_logger.info("üß† Iniciando an√°lise explorat√≥ria")
    analysis_logger.info("üìà Padr√µes identificados: 12 categorias")


def exemplo_section_logger():
    """Demonstra o uso do SectionLogger."""
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 2: SECTION LOGGER")
    print("=" * 60)

    logger = LoggerConfig.get_workflow_logger()
    section = SectionLogger(logger)

    # Se√ß√£o principal
    section.start_section(
        "AN√ÅLISE EXPLORAT√ìRIA DE DADOS",
        "Processo de investiga√ß√£o inicial dos dados coletados",
    )

    # Subse√ß√µes e passos
    section.subsection("Verifica√ß√£o de Qualidade")
    section.step(1, "Verificar integridade dos dados")
    section.step(2, "Identificar valores ausentes")
    section.step(3, "Validar formato dos campos")

    # Resultados
    section.result("Dados v√°lidos", "1.250 registros", "98.5% do total")
    section.result("Valores ausentes", "19 registros", "1.5% do total")
    section.result("Campos problem√°ticos", "3 campos", "formato inconsistente")

    # Avisos e erros
    section.warning("Alguns campos t√™m formato inconsistente")
    section.error("Campo 'data_inicio' com formato inv√°lido", "DD/MM/AAAA esperado")

    # Sucessos
    section.success("Verifica√ß√£o de qualidade conclu√≠da")

    # Finalizar se√ß√£o
    section.end_section("An√°lise explorat√≥ria conclu√≠da com sucesso")


def exemplo_progress_logger():
    """Demonstra o uso do ProgressLogger."""
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 3: PROGRESS LOGGER")
    print("=" * 60)

    logger = LoggerConfig.get_collection_logger()
    progress = ProgressLogger(logger, "Coleta de Dados UNA-SUS")

    # Iniciar progresso
    progress.start(1000)  # Total de 1000 itens

    # Simular progresso
    for i in range(0, 1001, 200):
        progress.update(i, f"P√°gina {i//200 + 1} processada")
        time.sleep(0.5)  # Simular processamento

    # Concluir
    progress.complete("1000 registros coletados com sucesso")


def exemplo_logging_detalhado():
    """Demonstra logging com diferentes n√≠veis de detalhamento."""
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 4: LOGGING DETALHADO")
    print("=" * 60)

    # Logger detalhado para codifica√ß√£o
    coding_logger = LoggerConfig.get_coding_logger()

    coding_logger.debug("üîç Iniciando an√°lise de conceitos")
    coding_logger.debug("üîç Texto extra√≠do: 'Curso de forma√ß√£o em sa√∫de'")
    coding_logger.debug("üîç Palavras-chave identificadas: ['forma√ß√£o', 'sa√∫de']")

    coding_logger.info("üìä Conceito identificado: 'Forma√ß√£o em Sa√∫de'")
    coding_logger.info("üìä Frequ√™ncia: 45 ocorr√™ncias")

    coding_logger.warning("‚ö†Ô∏è Conceito similar encontrado: 'Capacita√ß√£o em Sa√∫de'")

    # Logger simples para coleta
    collection_logger = LoggerConfig.get_collection_logger()
    collection_logger.info("üì• Coleta conclu√≠da: 500 registros")


def exemplo_workflow_completo():
    """Demonstra um workflow completo com logging."""
    print("\n" + "=" * 60)
    print("üìù EXEMPLO 5: WORKFLOW COMPLETO")
    print("=" * 60)

    logger = LoggerConfig.get_workflow_logger()
    section = SectionLogger(logger)
    progress = ProgressLogger(logger, "Processo Completo")

    # In√≠cio do workflow
    section.start_section(
        "WORKFLOW GROUNDED THEORY", "Processo completo de pesquisa qualitativa"
    )

    # Etapa 1: Coleta
    section.subsection("ETAPA 1: COLETA DE DADOS")
    progress.start(500)

    for i in range(0, 501, 100):
        progress.update(i, f"Lote {i//100 + 1} processado")
        time.sleep(0.3)

    progress.complete("500 registros coletados")
    section.result("Coleta", "500 registros", "100% conclu√≠do")

    # Etapa 2: An√°lise
    section.subsection("ETAPA 2: AN√ÅLISE EXPLORAT√ìRIA")
    section.step(1, "Verificar estrutura dos dados")
    section.step(2, "Identificar campos principais")
    section.step(3, "Analisar distribui√ß√µes")

    section.result("Campos identificados", "15 campos", "todos v√°lidos")
    section.result("Distribui√ß√µes analisadas", "8 categorias", "padr√µes encontrados")

    # Etapa 3: Codifica√ß√£o
    section.subsection("ETAPA 3: CODIFICA√á√ÉO ABERTA")
    progress.start(500)

    for i in range(0, 501, 50):
        progress.update(i, f"Registro {i} codificado")
        time.sleep(0.1)

    progress.complete("500 registros codificados")
    section.result("Conceitos identificados", "23 conceitos", "codifica√ß√£o aberta")

    # Finalizar workflow
    section.end_section("Workflow conclu√≠do com sucesso")


def main():
    """Executa todos os exemplos de logging."""
    print("üöÄ DEMONSTRA√á√ÉO DO SISTEMA DE LOGGING MELHORADO")
    print("=" * 60)

    try:
        exemplo_logging_basico()
        exemplo_section_logger()
        exemplo_progress_logger()
        exemplo_logging_detalhado()
        exemplo_workflow_completo()

        print("\n" + "=" * 60)
        print("‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO")
        print("üìÅ Verifique a pasta 'logs' para os arquivos gerados")
        print("=" * 60)

    except Exception as e:
        print(f"‚ùå Erro durante a demonstra√ß√£o: {str(e)}")


if __name__ == "__main__":
    main()
