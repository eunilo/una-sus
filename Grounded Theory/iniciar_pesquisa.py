#!/usr/bin/env python3
"""
üöÄ INICIADOR DE PESQUISA - GROUNDED THEORY
==========================================

Script did√°tico para iniciar pesquisa usando metodologia Grounded Theory.
Este script guia o usu√°rio atrav√©s do processo de forma explicativa.
"""

import os
import sys
import time
from datetime import datetime


def mostrar_banner():
    """
    üé® Mostra banner de boas-vindas.
    """
    print("=" * 80)
    print("üß† PESQUISA GROUNDED THEORY - UNA-SUS")
    print("=" * 80)
    print("üìö Metodologia de Pesquisa Qualitativa")
    print("üéØ Desenvolvimento de Teoria a partir dos Dados")
    print("üîç An√°lise Sistem√°tica e Iterativa")
    print("=" * 80)
    print()


def explicar_grounded_theory():
    """
    üìö Explica o que √© Grounded Theory.
    """
    print("üìö O QUE √â GROUNDED THEORY?")
    print("-" * 40)
    print("üîç Grounded Theory √© uma metodologia de pesquisa qualitativa que:")
    print("   ‚Ä¢ Coleta dados sem preconceitos")
    print("   ‚Ä¢ Analisa dados de forma sistem√°tica")
    print("   ‚Ä¢ Desenvolve teoria baseada nos dados")
    print("   ‚Ä¢ Usa processo iterativo at√© satura√ß√£o")
    print()

    print("üéØ OBJETIVO DESTA PESQUISA:")
    print("   ‚Ä¢ Coletar dados dos cursos UNA-SUS")
    print(
        "   ‚Ä¢ Identificar elementos DEIA (Diversidade, Equidade, Inclus√£o, Acessibilidade)"
    )
    print("   ‚Ä¢ Desenvolver teoria sobre forma√ß√£o em DEIA")
    print("   ‚Ä¢ Gerar insights para pol√≠ticas p√∫blicas")
    print()


def mostrar_opcoes():
    """
    üéØ Mostra op√ß√µes dispon√≠veis.
    """
    print("üéØ OP√á√ïES DISPON√çVEIS:")
    print("-" * 30)
    print("1Ô∏è‚É£ COLETA COMPLETA + PROCESSAMENTO DEIA")
    print("   ‚Ä¢ Coleta todos os dados da UNA-SUS")
    print("   ‚Ä¢ Processa para identificar elementos DEIA")
    print("   ‚Ä¢ Gera relat√≥rios e estat√≠sticas")
    print("   ‚è±Ô∏è  Tempo estimado: 30-60 minutos")
    print()

    print("2Ô∏è‚É£ APENAS COLETA COMPLETA")
    print("   ‚Ä¢ Coleta todos os dados sem processamento")
    print("   ‚Ä¢ Salva dados brutos para an√°lise posterior")
    print("   ‚Ä¢ √ötil para an√°lise manual ou personalizada")
    print("   ‚è±Ô∏è  Tempo estimado: 20-40 minutos")
    print()

    print("3Ô∏è‚É£ PROCESSAMENTO DEIA (Dados Existentes)")
    print("   ‚Ä¢ Usa dados j√° coletados")
    print("   ‚Ä¢ Aplica an√°lise DEIA")
    print("   ‚Ä¢ Gera relat√≥rios")
    print("   ‚è±Ô∏è  Tempo estimado: 5-10 minutos")
    print()

    print("4Ô∏è‚É£ METODOLOGIA GROUNDED THEORY COMPLETA")
    print("   ‚Ä¢ Executa todas as etapas da metodologia")
    print("   ‚Ä¢ Codifica√ß√£o aberta, axial e seletiva")
    print("   ‚Ä¢ Desenvolvimento de teoria")
    print("   ‚è±Ô∏è  Tempo estimado: 2-4 horas")
    print()

    print("5Ô∏è‚É£ TESTES E VERIFICA√á√ÉO")
    print("   ‚Ä¢ Testa se tudo est√° funcionando")
    print("   ‚Ä¢ Verifica m√≥dulos e configura√ß√µes")
    print("   ‚Ä¢ Diagn√≥stico de problemas")
    print("   ‚è±Ô∏è  Tempo estimado: 2-5 minutos")
    print()

    print("6Ô∏è‚É£ SAIR")
    print("   ‚Ä¢ Encerra o programa")
    print()


def verificar_ambiente():
    """
    üîç Verifica se o ambiente est√° pronto.
    """
    print("üîç VERIFICANDO AMBIENTE...")
    print("-" * 30)

    # Verificar Python
    print(f"üêç Python: {sys.version.split()[0]}")

    # Verificar m√≥dulos
    try:
        import pandas

        print("‚úÖ pandas - OK")
    except ImportError:
        print("‚ùå pandas - N√ÉO INSTALADO")
        print("   Execute: pip install pandas")
        return False

    try:
        import requests

        print("‚úÖ requests - OK")
    except ImportError:
        print("‚ùå requests - N√ÉO INSTALADO")
        print("   Execute: pip install requests")
        return False

    # Verificar arquivos
    arquivos_necessarios = [
        "modulos/__init__.py",
        "modulos/coletor_unasus_completo.py",
        "modulos/processador_deia.py",
        "coleta_e_processamento_separados.py",
    ]

    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} - OK")
        else:
            print(f"‚ùå {arquivo} - N√ÉO ENCONTRADO")
            return False

    print("‚úÖ Ambiente verificado com sucesso!")
    print()
    return True


def executar_teste():
    """
    üß™ Executa testes b√°sicos.
    """
    print("üß™ EXECUTANDO TESTES...")
    print("-" * 30)

    try:
        # Testar importa√ß√£o dos m√≥dulos
        from modulos.coletor_unasus_completo import ColetorUnasusCompleto
        from modulos.processador_deia import ProcessadorDEIA

        print("‚úÖ M√≥dulos importados com sucesso")

        # Testar instancia√ß√£o
        import logging

        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger("Teste")

        coletor = ColetorUnasusCompleto(logger)
        processador = ProcessadorDEIA(logger)
        print("‚úÖ Classes instanciadas com sucesso")

        print("‚úÖ Todos os testes passaram!")
        return True

    except Exception as e:
        print(f"‚ùå Erro nos testes: {str(e)}")
        return False


def executar_opcao(opcao):
    """
    üöÄ Executa a op√ß√£o escolhida.
    """
    print(f"üöÄ EXECUTANDO OP√á√ÉO {opcao}...")
    print("-" * 40)

    if opcao == "1":
        print("üì• Iniciando coleta completa + processamento DEIA...")
        os.system("python coleta_e_processamento_separados.py")

    elif opcao == "2":
        print("üì• Iniciando apenas coleta completa...")
        # Modificar para executar apenas coleta
        os.system("python coleta_e_processamento_separados.py")

    elif opcao == "3":
        print("üîç Iniciando processamento DEIA...")
        # Modificar para executar apenas processamento
        os.system("python coleta_e_processamento_separados.py")

    elif opcao == "4":
        print("üß† Iniciando metodologia Grounded Theory completa...")
        os.system("python grounded_theory_runner.py")

    elif opcao == "5":
        print("üß™ Iniciando testes...")
        if executar_teste():
            print("‚úÖ Testes conclu√≠dos com sucesso!")
        else:
            print("‚ùå Alguns testes falharam. Verifique os erros acima.")

    print("‚úÖ Execu√ß√£o conclu√≠da!")


def mostrar_dicas():
    """
    üí° Mostra dicas √∫teis.
    """
    print("üí° DICAS √öTEIS:")
    print("-" * 20)
    print("üìä Durante a execu√ß√£o:")
    print("   ‚Ä¢ Monitore os logs em tempo real")
    print("   ‚Ä¢ Os dados s√£o salvos automaticamente")
    print("   ‚Ä¢ Voc√™ pode interromper com Ctrl+C")
    print("   ‚Ä¢ O progresso √© salvo em checkpoints")
    print()

    print("üìÅ Arquivos gerados:")
    print("   ‚Ä¢ dados_completos.json - Dados brutos")
    print("   ‚Ä¢ analise_deia.json - An√°lise DEIA")
    print("   ‚Ä¢ relatorio_deia.md - Relat√≥rio")
    print("   ‚Ä¢ logs/ - Logs de execu√ß√£o")
    print()

    print("üîç Para an√°lise posterior:")
    print("   ‚Ä¢ Use Excel para visualizar dados")
    print("   ‚Ä¢ Leia relat√≥rios em Markdown")
    print("   ‚Ä¢ Consulte logs para detalhes")
    print()


def main():
    """
    üöÄ Fun√ß√£o principal.
    """
    # Mostrar banner
    mostrar_banner()

    # Verificar ambiente
    if not verificar_ambiente():
        print("‚ùå Ambiente n√£o est√° pronto. Corrija os problemas acima.")
        return

    # Explicar Grounded Theory
    explicar_grounded_theory()

    # Loop principal
    while True:
        # Mostrar op√ß√µes
        mostrar_opcoes()

        # Obter escolha do usu√°rio
        try:
            escolha = input("üéØ Escolha uma op√ß√£o (1-6): ").strip()

            if escolha == "6":
                print("üëã Obrigado por usar a pesquisa Grounded Theory!")
                print("üìö Boa pesquisa!")
                break
            elif escolha in ["1", "2", "3", "4", "5"]:
                # Mostrar dicas antes de executar
                mostrar_dicas()

                # Confirmar execu√ß√£o
                confirmacao = input("üöÄ Confirmar execu√ß√£o? (s/n): ").strip().lower()
                if confirmacao in ["s", "sim", "y", "yes"]:
                    executar_opcao(escolha)
                else:
                    print("‚è∏Ô∏è Execu√ß√£o cancelada.")
            else:
                print("‚ùå Op√ß√£o inv√°lida. Escolha 1-6.")

        except KeyboardInterrupt:
            print("\n‚è∏Ô∏è Execu√ß√£o interrompida pelo usu√°rio.")
            break
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")

        print("\n" + "=" * 80)
        print()


if __name__ == "__main__":
    main()
