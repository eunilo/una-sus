name: 🏥 UNA-SUS - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.txt
        pip install pytest pytest-cov
    
    - name: 🧪 Run tests
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: 🔍 Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🎨 Format check with black
      run: |
        black --check src/
    
    - name: 📝 Import sorting check with isort
      run: |
        isort --check-only src/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: 🏗️ Build package
      run: |
        python -m build
    
    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 📦 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: 🚀 Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🎉 **UNA-SUS v${{ github.run_number }}**
          
          ### 📦 What's New
          - Sistema modular e profissional
          - Database SQLite completo
          - Scrapers testados e confiáveis
          - Documentação completa
          
          ### 🚀 Installation
          ```bash
          pip install una-sus
          ```
          
          ### 📚 Documentation
          - [Manual de Uso](docs/MANUAL.md)
          - [Documentação Principal](docs/README.md)
        draft: false
        prerelease: false 